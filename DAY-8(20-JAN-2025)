Merge two sorted linked lists
Given the head of two sorted linked lists consisting of nodes respectively. The task is to merge both lists and return the head of the sorted merged list.
Examples:
Input: head1 = 5 -> 10 -> 15 -> 40, head2 = 2 -> 3 -> 20
Output: 2 -> 3 -> 5 -> 10 -> 15 -> 20 -> 40
Explanation:
Input: head1 = 1 -> 1, head2 = 2 -> 4
Output: 1 -> 1 -> 2 -> 4
Explanation:
Constraints:
1 <= no. of nodes<= 103
0 <= node->data <= 105
Solution:
class Solution {
    Node sortedMerge(Node h1, Node h2) {
        // code here
        if(h1!=null ||h2!=null){
            if(h1==null && h2 != null){
                return h2;
            }
            else if(h1!=null && h2 == null){
                return h1;
            }
            else{
                if(h1.data>=h2.data){
                    h2.next = sortedMerge(h1, h2.next);
                    return h2;
                }else{
                    h1.next = sortedMerge(h1.next, h2);
                    return h1;
                }
            }
        }
        return h1;
    }
}

