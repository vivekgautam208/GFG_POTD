Given Question:
Given an array arr[] of non-negative integers, where each element arr[i] represents the height of the vertical lines,
find the maximum amount of water that can be contained between any two lines, together with the x-axis.

Note: In the case of a single vertical line it will not be able to hold water.

Examples:
Input: arr[] = [1, 5, 4, 3]
Output: 6
Explanation: 5 and 3 are 2 distance apart. So the size of the base is 2.
Height of container = min(5, 3) = 3. So, total area to hold water = 3 * 2 = 6.

APPROACH:If we use brute force using two loops then the time complexity will be O(n2).
BY USING TWO POINTER APPROACH we can reduce the time complexity to O(n),
The area between two lines at index left and right is calculated as:Area=(right−left)×min(arr[left],arr[right]) 
We move the pointer pointing to the shorter line to try to find a taller line that may result in a larger area.

According To Question The Code Are As Follow...

int maxWaterContainer(vector<int>& arr) {
    int left = 0;
    int right = arr.size() - 1;
    int maxArea = 0;

    while (left < right) {
   
        int height = min(arr[left], arr[right]);
        int width = right - left;
        int area = height * width;

        maxArea = max(maxArea, area);

        if (arr[left] < arr[right]) {
            left++;
        } else {
            right--;
        }
    }

    return maxArea;
}
